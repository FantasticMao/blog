<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on FantasticMao&#39;s Blog</title>
    <link>https://blog.fantasticmao.cn/tags/java/</link>
    <description>Recent content in Java on FantasticMao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 25 Nov 2020 23:00:00 +0800</lastBuildDate><atom:link href="https://blog.fantasticmao.cn/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java GC 案例两则</title>
      <link>https://blog.fantasticmao.cn/2020/11/25/java-gc-%E6%A1%88%E4%BE%8B%E4%B8%A4%E5%88%99/</link>
      <pubDate>Wed, 25 Nov 2020 23:00:00 +0800</pubDate>
      
      <guid>https://blog.fantasticmao.cn/2020/11/25/java-gc-%E6%A1%88%E4%BE%8B%E4%B8%A4%E5%88%99/</guid>
      <description>&lt;p&gt;本篇文章记录和分享自己近期遇到的两个 GC 相关案例。在谈及的两个案例中，应用均是使用 &lt;code&gt;-XX:+UseConcMarkSweepGC&lt;/code&gt; 参数来指定了 GC 收集器，因此本文分析和排查问题的前提也是对于该场景而言的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java ThreadPoolExecutor 源码分析</title>
      <link>https://blog.fantasticmao.cn/2020/10/01/java-threadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 01 Oct 2020 18:41:53 +0800</pubDate>
      
      <guid>https://blog.fantasticmao.cn/2020/10/01/java-threadpoolexecutor-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;本篇文章对 JDK8 线程池框架中 ThreadPoolExecutor 类进行源码分析，将会从 ThreadPoolExecutor 工作机制角度分析它在 &lt;a href=&#34;#%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86&#34;&gt;状态管理&lt;/a&gt;、&lt;a href=&#34;#%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1&#34;&gt;提交任务&lt;/a&gt;、&lt;a href=&#34;#%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1&#34;&gt;执行任务&lt;/a&gt;、&lt;a href=&#34;#%E5%9B%9E%E6%94%B6%E7%BA%BF%E7%A8%8B&#34;&gt;回收线程&lt;/a&gt; 和 &lt;a href=&#34;#%E6%8B%92%E7%BB%9D%E4%BB%BB%E5%8A%A1&#34;&gt;拒绝任务&lt;/a&gt; 阶段的设计思路和代码实现。线程池框架的介绍和使用不在本篇文章涵盖的范围之内。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java JNI 简单实践</title>
      <link>https://blog.fantasticmao.cn/2020/05/18/java-jni-%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 18 May 2020 20:40:21 +0800</pubDate>
      
      <guid>https://blog.fantasticmao.cn/2020/05/18/java-jni-%E7%AE%80%E5%8D%95%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;p&gt;本篇文章介绍 Java JNI 的基本概念和技术要点，并开发一个简单的示例程序作为实践。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式概览</title>
      <link>https://blog.fantasticmao.cn/2018/02/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%A7%88/</link>
      <pubDate>Wed, 14 Feb 2018 23:33:47 +0800</pubDate>
      
      <guid>https://blog.fantasticmao.cn/2018/02/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%A7%88/</guid>
      <description>&lt;p&gt;本篇文章记录我所理解和掌握的在 &lt;a href=&#34;https://book.douban.com/subject/1436745/&#34;&gt;《Design Patterns》&lt;/a&gt; 书中提及的一些设计模式，及其在 JDK 和 Spring 中的一些实现。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 泛型的擦除</title>
      <link>https://blog.fantasticmao.cn/2017/01/02/java-%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%93%A6%E9%99%A4/</link>
      <pubDate>Mon, 02 Jan 2017 20:12:26 +0800</pubDate>
      
      <guid>https://blog.fantasticmao.cn/2017/01/02/java-%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%93%A6%E9%99%A4/</guid>
      <description>&lt;p&gt;本篇文章介绍 Java 的一个残缺实现，确切地说是 Java SE5 为向后兼容而采取的折中实现 —— 泛型，记录内容包括基本语法、通配符和边界、泛型擦除。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
